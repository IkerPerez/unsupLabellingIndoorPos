x<-seq(-2,2,0.001)
ts.plot(x)
x<-seq(-2,2,0.001)
ts.plot(x)
plot(x,dnorm(x),type="l",col="b")
plot(x,dnorm(x),type="l",col="black")
plot(x,dnorm(x),type="l",col="black",ylim=c(0,0.5))
plot(x,dnorm(x),type="l",col="black")
plot(x,dnorm(x),type="l",col="black",ylim=c(0,0.5))
x<-seq(-4,4,0.001)
plot(x,dnorm(x),type="l",col="black",ylim=c(0,0.5))
plot(x,2/sqrt(2*pi)*exp(-x^2/2)*pnorm(x),type="l",col="black",ylim=c(0,0.5))
plot(x,dnorm(x),type="l",col="black",ylim=c(0,0.5))
lines(x,2/sqrt(2*pi)*exp(-x^2/2)*pnorm(x),col="blue",ylim=c(0,0.5))
task <- c(1,5,0,0,2)
2^task
2^task/sum(2^task)
sum(2^task/sum(2^task))
task2 <- c(1,50,0,0,2)
sum(2^task2/sum(2^task2))
2^task2/sum(2^task2)
# Read in the obtained tables/files/lists
load("listObservedSignals.Rdata"); load("listObservedHotSpots.Rdata"); load("listCandidateWards.Rdata")
load("listTimeAndPhones.Rdata")
# Initialize transMatrix, obsProbs, sigMeans, sigSDs and prior scaling lambda
A <- matrix(1/ncol(listCandidateWards[[2]]),ncol(listCandidateWards[[2]]),ncol(listCandidateWards[[2]]))
p <- matrix(0.5,ncol(listCandidateWards[[2]]),ncol(listObservedHotSpots[[1]]))
mu <- matrix(-80,ncol(listCandidateWards[[2]]),ncol(listObservedHotSpots[[1]]))
sigma <- matrix(15,ncol(listCandidateWards[[2]]),ncol(listObservedHotSpots[[1]]))
lambda <- 2
# Initialize membership probabilities matrices
wardP <- vector("list",length(listTimeAndPhones))
for (i in 1:length(wardP)){
wardP[[i]] <- matrix(1/nrow(p),nrow(listCandidateWards[[i]]),nrow(p))
print(ncol(listCandidateWards[[i]]))
}
wardsP <- vector("list",length(listTimeAndPhones))
for (i in 1:length(wardP)){
wardsP[[i]] <- vector("list",nrow(listCandidateWards[[i]]))
for (j in 1:length(wardsP[[i]])){
wardsP[[i]][[j]]<-matrix(1/nrow(p)^2,nrow(p),nrow(p))
}
}
# Need to avoid NA entries in best signals... turn them in -1000 (will be ignored in algorithm)
for (i in 1:length(listObservedSignals)){
listObservedSignals[[i]][is.na(listObservedSignals[[i]])] <- -1000
}; rm(i,j)
# Initialize a dummy vector of length ncol(bestSignals)
dummy <- rep(0,ncol(listObservedSignals[[1]]))
#***********
# FUNCTIONS
#***********
# Observation functions
b <- function(phone,t,w){
idx <- as.logical(listObservedHotSpots[[phone]][t,])
if( sum(idx)==0 ) return(prod(1 - p[w,]))
dummy[!idx] <- (1 - p[w,!idx])
dummy[idx] <- p[w,idx] * dnorm( (as.numeric(listObservedSignals[[phone]][t,idx]) - mu[w,idx]) / sigma[w,idx] ) / sigma[w,idx]
return(prod(dummy) * lambda^listCandidateWards[[phone]][t,w] )
}
bVector <- function(phone,t){
probs <- sapply(1:nrow(p), function(x) b(phone,t,x))
#if(sum(probs)==0){
#return(rep(1/nrow(p),nrow(p)))
#}
#return(probs/sum(probs))
return(probs)
}
# Functions to extract MLE estimators of parameters for each duplet, given membership probabilities
getEstimators <- function(k,j){
memberSum <- 0; memberObsSum <- 0; memberObsSignal <- 0; memberObsDev <- 0
for (phoneDummy in 1:length(listObservedHotSpots)){
idx <- which(listObservedHotSpots[[phoneDummy]][,j] == 1)
memberSum <- memberSum + sum(wardP[[phoneDummy]][,k])
memberObsSum <- memberObsSum + sum(wardP[[phoneDummy]][idx,k])
memberObsSignal <- memberObsSignal + sum(wardP[[phoneDummy]][idx,k]*listObservedSignals[[phoneDummy]][idx,j])
}
obsProb <- memberObsSum / memberSum
mean <- memberObsSignal / memberObsSum
for (phoneDummy in 1:length(listObservedHotSpots)){
idx <- which((listObservedHotSpots[[phoneDummy]][,j] == 1))
memberObsDev <- memberObsDev + sum(wardP[[phoneDummy]][idx,k]*(listObservedSignals[[phoneDummy]][idx,j]-mean)^2)
}
stDev <- sqrt( memberObsDev / memberObsSum )
return(c(obsProb,mean,stDev))
}
wardEstimators <- function(k){
return(t(sapply(1:ncol(p), function(x) getEstimators(k,x))))
}
# Function to extract MLE estimator of lambda, given membership probabilities
scoreLambdaInner <- function(l,phone,t){
iepe <- sum( wardP[[phone]][t,] * log( l^listCandidateWards[[phone]][t,] / sum(l^listCandidateWards[[phone]][t,]) ) )
return( iepe )
}
scoreLambdaInner2 <- function(l,phone){
return(sum(sapply(1:nrow(wardP[[phone]]), function(x) scoreLambdaInner(l,phone,x))))
}
scoreLambda <- function(l){
return(-sum(parSapply(c1,1:length(wardP), function(x) scoreLambdaInner2(l,x)))) # Negative, need to use optim
}
# Function to compute log-likelihood proportional bit (to assess whether convergence was reached)
sumJ <- function(phone,t,w){
iepe <- rep(0,ncol(p))
idx <- as.logical(listObservedHotSpots[[phone]][t,])
iepe[!idx] <- (1-p[w,!idx])
iepe[idx] <- (p[w,idx] * dnorm( (as.numeric(listObservedSignals[[phone]][t,idx]) - mu[w,idx]) / sigma[w,idx] ) / sigma[w,idx])
iepe <- wardP[[phone]][t,w] * sum( log(iepe) )
return( iepe )
}
sumW <- function(phone,t){
iep <- sapply(1:nrow(p), function(x) sumJ(phone,t,x))
return(sum(iep))
}
sumT <- function(phone){
iep <- sapply(1:nrow(wardP[[phone]]), function(x) sumW(phone,x))
return(sum(iep))
}
# Function to compute log-likelihood proportional bit (Trans. Matrix bit)
sumW2 <- function(phone,t,w1){
return( sum( log(A[w1,]) * wardsP[[phone]][[t-1]][w1,] ) )
}
sumW1 <- function(phone,t){
return( sum(sapply(1:nrow(p), function(x) sumW2(phone,t,x))) )
}
sumTmatrix <- function(phone){
# Here is when we ignore those entries where the phone was not active!
return( sum(sapply(which(listTimeAndPhones[[phone]][,4]=="yes")[-1], function(x) sumW1(phone,x))) )
}
# Full pseudo log-likelihood accounting for membership probabilities!
logLik <- function(){
iep <- parSapply(c1,1:length(wardP), sumT)
iep2 <- parSapply(c1,1:length(wardP), sumTmatrix)
return(sum(iep)+sum(iep2)-scoreLambda(lambda))
}
#****************************************************
# EXPECTATION MAXIMIZATION FORWARD/BACKWARD PROCEDURE
#****************************************************
library(snow); library(parallel)
c1 <- makeCluster(7,type="SOCK") #This machine has got 8 cores, check parallel.detectCores()
# We declare the alpha and beta lists
alpha <- vector(mode="list",length=8) # Keep things just up to proportionality on w
beta <- vector(mode="list",length=8) # Keep things just up to proportionality on w
for (phone in 1:8) alpha[[phone]] <- matrix(0,nrow(listCandidateWards[[phone]]),ncol(A))
for (phone in 1:8) beta[[phone]] <- matrix(0,nrow(listCandidateWards[[phone]]),ncol(A))
# We define functions for the forward/backward passes; so that we can easily paralellize
forwardPass <- function(phone){
alpha[[phone]][1,20] <- 1 # This is because in first entry it must be in Coord Room
logVectorActPhone <- listTimeAndPhones[[phone]][,4]=="yes"
for (t in 2:nrow(listCandidateWards[[phone]])){
if (!logVectorActPhone[t]){
alpha[[phone]][t,20] <- 1 # Recall that if we know its in coord room we need to account for it!
# Probability of observation being made from anywhere else than coord room is 0!
} else {
alpha[[phone]][t,] <- bVector(phone,t) * alpha[[phone]][t-1,]%*%A
alpha[[phone]][t,] <- alpha[[phone]][t,] / sum(alpha[[phone]][t,])
}
}
return(alpha[[phone]])
}
backwardPass <- function(phone){
beta[[phone]][nrow(beta[[phone]]),] <- 1/ncol(A) # We just keep info up to proportionality on ward likelihoods
logVectorActPhone <- listTimeAndPhones[[phone]][,4]=="yes"
for (t in seq(nrow(beta[[phone]])-1,1,-1) ){
if (!logVectorActPhone[t+1]){
beta[[phone]][t,] <- A[,20] / sum(A[,20]) # If at next time we know it must be in coord room, then this is proportional to transitions
# to that cluster
} else {
beta[[phone]][t,] <- A %*% (bVector(phone,t+1) * beta[[phone]][t+1,])
beta[[phone]][t,] <- beta[[phone]][t,] / sum(beta[[phone]][t,])
}
}
return(beta[[phone]])
}
clusterExport(c1,list("wardP","sumW","sumT","sumJ","p","listObservedHotSpots","listObservedSignals","listCandidateWards",
"listTimeAndPhones","sumW1","sumW2","sumTmatrix","A","wardsP","alpha","beta","forwardPass",
"mu","sigma","scoreLambdaInner2","scoreLambdaInner","lambda","b","bVector","dummy","backwardPass"))
w^54
2^54
exit
q()
plot(seq(0,1,0.001),1/30*seq(0,1,0.001)^2*(1-seq(0,1,0.001)),type="l")
sum(1/30*seq(0,1,0.001)^2*(1-seq(0,1,0.001))*0.001)
sum(30*seq(0,1,0.001)^2*(1-seq(0,1,0.001))*0.001)
plot(seq(0,1,0.001),30*seq(0,1,0.001)^4*(1-seq(0,1,0.001)),type="l")
sum(30*seq(0,1,0.001)^4*(1-seq(0,1,0.001))*0.001)
30/42
log(exp(3))
# Read in the obtained tables/files/lists
load("listObservedSignals.Rdata"); load("listObservedHotSpots.Rdata"); load("listCandidateWards.Rdata")
load("listTimeAndPhones.Rdata")
# Initialize obsProbs, sigMeans, sigSDs
p <- matrix(0.5,ncol(listCandidateWards[[2]]),ncol(listObservedHotSpots[[1]]))
mu <- matrix(-80,ncol(listCandidateWards[[2]]),ncol(listObservedHotSpots[[1]]))
sigma <- matrix(15,ncol(listCandidateWards[[2]]),ncol(listObservedHotSpots[[1]]))
# Initialize weight parameters for features (proper starting values!)
nu <- rep(1,ncol(listCandidateWards[[2]]))
lambda <- matrix(-2,ncol(listCandidateWards[[2]]),ncol(listCandidateWards[[2]]))
diag(lambda) <- 0
# Initialize membership probabilities matrices
wardP <- vector("list",length(listTimeAndPhones))
for (i in 1:length(wardP)){
wardP[[i]] <- matrix(0,nrow(listCandidateWards[[i]]),nrow(p))
print(ncol(listCandidateWards[[i]]))
}
wardsP <- vector("list",length(listTimeAndPhones))
for (i in 1:length(wardP)){
wardsP[[i]] <- vector("list",nrow(listCandidateWards[[i]]))
for (j in 1:length(wardsP[[i]])){
wardsP[[i]][[j]]<-matrix(0,nrow(p),nrow(p))
}
}
# Need to avoid NA entries in best signals... turn them in -1000 (will be ignored in algorithm)
for (i in 1:length(listObservedSignals)){
listObservedSignals[[i]][is.na(listObservedSignals[[i]])] <- -1000
}; rm(i,j)
# Initialize a dummy vector of length ncol(bestSignals)
dummy <- rep(0,ncol(listObservedSignals[[1]]))
#***********
# FUNCTIONS
#***********
# Observation functions
b <- function(phone,t,w){
idx <- as.logical(listObservedHotSpots[[phone]][t,])
if( sum(idx)==0 ) return(prod(1 - p[w,]))
dummy[!idx] <- (1 - p[w,!idx])
dummy[idx] <- p[w,idx] * dnorm( (as.numeric(listObservedSignals[[phone]][t,idx]) - mu[w,idx]) / sigma[w,idx] ) / sigma[w,idx]
return(prod(dummy))
}
bVector <- function(phone,t){
probs <- sapply(1:nrow(p), function(x) b(phone,t,x))
return(probs)
}
# Entropy Classifier Transition Matrix (proportional!), this is gonna be sloooooow
transitionM <- function(t,phone){
return(exp(lambda+ t(t(nu)) %*% listCandidateWards[[phone]][t,] ))
}
# Functions to extract MLE estimators of parameters for each duplet, given membership probabilities
getEstimators <- function(k,j){
memberSum <- 0; memberObsSum <- 0; memberObsSignal <- 0; memberObsDev <- 0
for (phoneDummy in 1:length(listObservedHotSpots)){
idx <- which(listObservedHotSpots[[phoneDummy]][,j] == 1)
memberSum <- memberSum + sum(wardP[[phoneDummy]][,k])
memberObsSum <- memberObsSum + sum(wardP[[phoneDummy]][idx,k])
memberObsSignal <- memberObsSignal + sum(wardP[[phoneDummy]][idx,k]*listObservedSignals[[phoneDummy]][idx,j])
}
obsProb <- memberObsSum / memberSum
if (memberObsSum==0) {mean <- mu[k,j]} else {mean <- memberObsSignal / memberObsSum}
for (phoneDummy in 1:length(listObservedHotSpots)){
idx <- which((listObservedHotSpots[[phoneDummy]][,j] == 1))
memberObsDev <- memberObsDev + sum(wardP[[phoneDummy]][idx,k]*(listObservedSignals[[phoneDummy]][idx,j]-mean)^2)
}
if (memberObsSum==0) {stDev <- sigma[k,j]} else {stDev <- sqrt( memberObsDev / memberObsSum )}
return(c(obsProb,mean,stDev))
}
wardEstimators <- function(k){
return(t(sapply(1:ncol(p), function(x) getEstimators(k,x))))
}
# Function to extract MLE estimator of weights in transition model!
scoreLambdasInner <- function(lambdasK,nuK,k,phone,t){
lambdasK[k] <- 0 # Always... thats the pivot in multinomial logit!
eprops <- exp(lambdasK+nuK*listCandidateWards[[phone]][t,])
return(sum(wardsP[[phone]][[t-1]][k,] * log( eprops/sum(eprops))))
}
sumTime <- function(lambdasK,nuK,k,phone){
# Here is when we ignore those entries where the phone was not active!
return(sum( sapply( which(listTimeAndPhones[[phone]][,4]=="yes")[-1], function(x) scoreLambdasInner(lambdasK,nuK,k,phone,x) ) ))
}
sumPhone <- function(lambdasK,nuK,k){
return(sum( parSapply(c1, 1:length(listTimeAndPhones), function(x) sumTime(lambdasK,nuK,k,x) ) ))
}
optimLambdasNuK <- function(x,k) {
lambdasK <- x[1:nrow(p)]
nuK<-x[nrow(p)+1]
return(-sumPhone(lambdasK,nuK,k)) #Negative since optim minimizes!
}
# Function to compute log-likelihood proportional bit (to assess whether convergence was reached)
sumJ <- function(phone,t,w){
iepe <- rep(0,ncol(p))
idx <- as.logical(listObservedHotSpots[[phone]][t,])
iepe[!idx] <- (1-p[w,!idx])
iepe[idx] <- (p[w,idx] * dnorm( (as.numeric(listObservedSignals[[phone]][t,idx]) - mu[w,idx]) / sigma[w,idx] ) / sigma[w,idx])
iepe <- wardP[[phone]][t,w] * sum( pmax(-100,log(iepe)) ) # We need to bound it... to be able to do parameter roundings later!
return( iepe )
}
sumW <- function(phone,t){
iep <- sapply(1:nrow(p), function(x) sumJ(phone,t,x))
return(sum(iep))
}
sumT <- function(phone){
iep <- sapply(1:nrow(wardP[[phone]]), function(x) sumW(phone,x))
return(sum(iep))
}
# Full pseudo log-likelihood accounting for membership probabilities!
logLik <- function(){
iep <- parSapply(c1,1:length(wardP), sumT)
ueee <- 0
for (i in 1:nrow(p)) ueee <- ueee + sumPhone(lambda[i,],nu[i],i)
return(sum(iep)+ueee)
}
#****************************************************
# EXPECTATION MAXIMIZATION FORWARD/BACKWARD PROCEDURE
#****************************************************
library(snow); library(parallel)
c1 <- makeCluster(7,type="SOCK") #This machine has got 8 cores, check parallel.detectCores()
# We declare the alpha and beta lists
alpha <- vector(mode="list",length=8) # Keep things just up to proportionality on w
beta <- vector(mode="list",length=8) # Keep things just up to proportionality on w
for (phone in 1:8) alpha[[phone]] <- matrix(0,nrow(listCandidateWards[[phone]]),ncol(wardP[[1]]))
for (phone in 1:8) beta[[phone]] <- matrix(0,nrow(listCandidateWards[[phone]]),ncol(wardP[[1]]))
# We define functions for the forward/backward passes; so that we can easily paralellize
forwardPass <- function(phone){
alpha[[phone]][1,11] <- 1 # This is because in first entry it must be in Coord Room
logVectorActPhone <- listTimeAndPhones[[phone]][,4]=="yes"
for (t in 2:nrow(listCandidateWards[[phone]])){
if (!logVectorActPhone[t]){
alpha[[phone]][t,11] <- 1 # Recall that if we know its in coord room we need to account for it!
# Probability of observation being made from anywhere else than coord room is 0!
} else {
alpha[[phone]][t,] <- bVector(phone,t) * alpha[[phone]][t-1,] %*% transitionM(t,phone)
alpha[[phone]][t,] <- alpha[[phone]][t,] / sum(alpha[[phone]][t,])
}
}
return(alpha[[phone]])
}
backwardPass <- function(phone){
beta[[phone]][nrow(beta[[phone]]),] <- 1/nrow(p) # We just keep info up to proportionality on ward likelihoods
logVectorActPhone <- listTimeAndPhones[[phone]][,4]=="yes"
for (t in seq(nrow(beta[[phone]])-1,1,-1) ){
if (!logVectorActPhone[t+1]){
beta[[phone]][t,] <- transitionM(t+1,1)[,11]  # If at next time we know it must be in coord room, then this is proportional to transitions
# to that cluster
beta[[phone]][t,] <- beta[[phone]][t,] / sum(beta[[phone]][t,])
} else {
beta[[phone]][t,] <- transitionM(t+1,phone) %*% (bVector(phone,t+1) * beta[[phone]][t+1,])
beta[[phone]][t,] <- beta[[phone]][t,] / sum(beta[[phone]][t,])
}
}
return(beta[[phone]])
}
# We also define a function for the computations of dual memberships, to also be able to parallelize
dualMemberships <- function(phone){
logVectorActPhone <- listTimeAndPhones[[phone]][,4]=="yes"
for(t in 2:length(wardsP[[phone]])){
if (!logVectorActPhone[t-1] && !logVectorActPhone[t]){
wardsP[[phone]][[t-1]][,] <- 0
wardsP[[phone]][[t-1]][11,11] <- 1
} else if (logVectorActPhone[t-1] && !logVectorActPhone[t]){
wardsP[[phone]][[t-1]][,] <- 0
wardsP[[phone]][[t-1]][,11] <- alpha[[phone]][t-1,] * transitionM(t,phone)[,11]
wardsP[[phone]][[t-1]] <- wardsP[[phone]][[t-1]] / sum(wardsP[[phone]][[t-1]]) # Can do after
#In this case it can only go to coord room straight in next transition!
} else {
wardsP[[phone]][[t-1]] <- t(t(alpha[[phone]][t-1,])) %*% (beta[[phone]][t,] * bVector(phone,t))
wardsP[[phone]][[t-1]] <- wardsP[[phone]][[t-1]] * transitionM(t,phone) # Can do after
wardsP[[phone]][[t-1]] <- wardsP[[phone]][[t-1]] / sum(wardsP[[phone]][[t-1]]) # Can do after
}
}
return(wardsP[[phone]])
}
#****************
# FIRST ITERATION
#****************
# Export info to Cluster
clusterExport(c1,list("wardP","sumW","sumT","sumJ","sumTime","sumPhone","p","listObservedHotSpots","listObservedSignals","listCandidateWards",
"listTimeAndPhones","nu","wardsP","alpha","beta","forwardPass","dualMemberships",
"mu","sigma","lambda","b","bVector","dummy","backwardPass","transitionM"))
setwd("D:/Iker/Wifi positioning/Dynamic Bayesian Network SupCl ExpTrans New")
# Read off all the relevant files we have so far
load("listObservedSignals.Rdata")
load("listObservedHotSpots.Rdata")
load("listCandidateWards.Rdata")
load("listTimeAndPhones.Rdata")
# Do not know why I had the idea to try with an "other" ward... with such small data set ignore it right away!
for (i in 1:length(listCandidateWards)) listCandidateWards[[i]] <- listCandidateWards[[i]][,-10]
library(RMySQL)
myDB <- dbConnect(MySQL(), user="root",
password="Anz5Ur8TUPVuh",
dbname="wayward",
host="localhost")
dbListTables(myDB)
hanData <- ( fetch( dbSendQuery(myDB, "select * from han") , n=-1) ) # Data from the task info
drShiftTimes <- ( fetch( dbSendQuery(myDB, "select * from drshift") , n=-1) ) # Relates phones at use with each doctor/shift
shifts <- read.csv("shiftsTimmings.csv",header=T)    # Jesse's is wrong for some reason
dbDisconnect(myDB); rm(myDB)
load("outputFiles/obsProbs.Rdata")
load("outputFiles/obsMeans.Rdata")
load("outputFiles/obsSDs.Rdata")
load("outputFiles/probabilityWards.Rdata")
load("outputFiles/lambdas.Rdata")
load("outputFiles/nus.Rdata")
# Overview of received signals from major HS for South
idx <-which(colnames(listCandidateWards[[1]])=="South"); colnames(listCandidateWards[[1]])[idx]
HSidx <- order(p[idx,],decreasing = T)[1:4]
signals <- c()
for(iepe in 1:8){
idx2 <- which(wardP[[iepe]][,idx]>0.95)
if(length(idx2)>0) signals <- rbind(signals,listObservedSignals[[iepe]][idx2,HSidx])
}
par(mfrow = c(2,2),
oma = c(1,0,0,0) + 0.1, # oma will push graphs to make space for title
mar = c(1,1,1,-1) + 2)
for(i in 1:4){
dummy<-density(signals[!is.na(signals[,i]),i],adjust=2)
dummy$y <- dummy$y * p[idx,HSidx[i]]
plot(dummy,xlim=c(-100,-30),ylim=c(0,0.06),main=colnames(listObservedSignals[[iepe]])[HSidx[i]],
lwd=1.5,bty="n",xlab=" ",ylab=" ");
lines(seq(-120,0,0.01),
p[idx,HSidx[i]]*dnorm(seq(-120,0,0.01),mu[idx,HSidx[i]],sigma[idx,HSidx[i]]),
col="red",lty=2,lwd=1.5)
}
rm(dummy, HSidx, i, idx, idx2)
paste("a","b")
idx <-which(colnames(listCandidateWards[[1]])=="South"); colnames(listCandidateWards[[1]])[idx]
HSidx <- order(p[idx,],decreasing = T)[1:4]
signals <- c()
for(iepe in 1:8){
idx2 <- which(wardP[[iepe]][,idx]>0.95)
if(length(idx2)>0) signals <- rbind(signals,listObservedSignals[[iepe]][idx2,HSidx])
}
par(mfrow = c(2,2),
oma = c(1,0,0,0) + 0.1, # oma will push graphs to make space for title
mar = c(1,1,1,-1) + 2)
for(i in 1:4){
dummy<-density(signals[!is.na(signals[,i]),i],adjust=2)
dummy$y <- dummy$y * p[idx,HSidx[i]]
plot(dummy,xlim=c(-100,-30),ylim=c(0,0.06),main=paste("AP:",colnames(listObservedSignals[[iepe]])[HSidx[i]]),
lwd=1.5,bty="n",xlab=" ",ylab=" ");
lines(seq(-120,0,0.01),
p[idx,HSidx[i]]*dnorm(seq(-120,0,0.01),mu[idx,HSidx[i]],sigma[idx,HSidx[i]]),
col="red",lty=2,lwd=1.5)
}
rm(dummy, HSidx, i, idx, idx2)
idx <-which(colnames(listCandidateWards[[1]])=="South"); colnames(listCandidateWards[[1]])[idx]
HSidx <- order(p[idx,],decreasing = T)[1:4]
signals <- c()
for(iepe in 1:8){
idx2 <- which(wardP[[iepe]][,idx]>0.95)
if(length(idx2)>0) signals <- rbind(signals,listObservedSignals[[iepe]][idx2,HSidx])
}
par(mfrow = c(2,2),
oma = c(1,0,0,0) + 0.1, # oma will push graphs to make space for title
mar = c(1,1,1,-1) + 2)
for(i in 1:4){
dummy<-density(signals[!is.na(signals[,i]),i],adjust=2)
dummy$y <- dummy$y * p[idx,HSidx[i]]
plot(dummy,xlim=c(-100,-30),ylim=c(0,0.06),main=paste("MAC Address:",colnames(listObservedSignals[[iepe]])[HSidx[i]]),
lwd=1.5,bty="n",xlab=" ",ylab=" ");
lines(seq(-120,0,0.01),
p[idx,HSidx[i]]*dnorm(seq(-120,0,0.01),mu[idx,HSidx[i]],sigma[idx,HSidx[i]]),
col="red",lty=2,lwd=1.5)
}
rm(dummy, HSidx, i, idx, idx2)
idx <-which(colnames(listCandidateWards[[1]])=="South"); colnames(listCandidateWards[[1]])[idx]
HSidx <- order(p[idx,],decreasing = T)[1:4]
signals <- c()
for(iepe in 1:8){
idx2 <- which(wardP[[iepe]][,idx]>0.95)
if(length(idx2)>0) signals <- rbind(signals,listObservedSignals[[iepe]][idx2,HSidx])
}
par(mfrow = c(2,2),
oma = c(1,0,0,0) + 0.1, # oma will push graphs to make space for title
mar = c(1,1,1,-1) + 2)
for(i in 1:4){
dummy<-density(signals[!is.na(signals[,i]),i],adjust=2)
dummy$y <- dummy$y * p[idx,HSidx[i]]
plot(dummy,xlim=c(-100,-30),ylim=c(0,0.06),main=paste("AP MAC:",colnames(listObservedSignals[[iepe]])[HSidx[i]]),
lwd=1.5,bty="n",xlab=" ",ylab=" ");
lines(seq(-120,0,0.01),
p[idx,HSidx[i]]*dnorm(seq(-120,0,0.01),mu[idx,HSidx[i]],sigma[idx,HSidx[i]]),
col="red",lty=2,lwd=1.5)
}
rm(dummy, HSidx, i, idx, idx2)
idx <-which(colnames(listCandidateWards[[1]])=="South"); colnames(listCandidateWards[[1]])[idx]
HSidx <- order(p[idx,],decreasing = T)[1:4]
signals <- c()
for(iepe in 1:8){
idx2 <- which(wardP[[iepe]][,idx]>0.95)
if(length(idx2)>0) signals <- rbind(signals,listObservedSignals[[iepe]][idx2,HSidx])
}
par(mfrow = c(2,2),
oma = c(1,0,0,0) + 0.1, # oma will push graphs to make space for title
mar = c(1,1,1,-1) + 2)
for(i in 1:4){
dummy<-density(signals[!is.na(signals[,i]),i],adjust=2)
dummy$y <- dummy$y * p[idx,HSidx[i]]
plot(dummy,xlim=c(-100,-30),ylim=c(0,0.06),main=paste("MAC:",colnames(listObservedSignals[[iepe]])[HSidx[i]]),
lwd=1.5,bty="n",xlab=" ",ylab=" ");
lines(seq(-120,0,0.01),
p[idx,HSidx[i]]*dnorm(seq(-120,0,0.01),mu[idx,HSidx[i]],sigma[idx,HSidx[i]]),
col="red",lty=2,lwd=1.5)
}
rm(dummy, HSidx, i, idx, idx2)
