wardP <- vector("list",length(listTimeAndPhones))
for (i in 1:length(wardP)){
wardP[[i]] <- matrix(0,nrow(listCandidateWards[[i]]),nrow(p))
print(ncol(listCandidateWards[[i]]))
}
wardsP <- vector("list",length(listTimeAndPhones))
for (i in 1:length(wardP)){
wardsP[[i]] <- vector("list",nrow(listCandidateWards[[i]]))
for (j in 1:length(wardsP[[i]])){
wardsP[[i]][[j]]<-matrix(0,nrow(p),nrow(p))
}
}
# Need to avoid NA entries in best signals... turn them in -1000 (will be ignored in algorithm)
for (i in 1:length(listObservedSignals)){
listObservedSignals[[i]][is.na(listObservedSignals[[i]])] <- -1000
}; rm(i,j)
# Initialize a dummy vector of length ncol(bestSignals)
dummy <- rep(0,ncol(listObservedSignals[[1]]))
#***********
# FUNCTIONS
#***********
# Observation functions
b <- function(phone,t,w){
idx <- as.logical(listObservedHotSpots[[phone]][t,])
if( sum(idx)==0 ) return(prod(1 - p[w,]))
dummy[!idx] <- (1 - p[w,!idx])
dummy[idx] <- p[w,idx] * dnorm( (as.numeric(listObservedSignals[[phone]][t,idx]) - mu[w,idx]) / sigma[w,idx] ) / sigma[w,idx]
return(prod(dummy))
}
bVector <- function(phone,t){
probs <- sapply(1:nrow(p), function(x) b(phone,t,x))
return(probs)
}
# Entropy Classifier Transition Matrix (proportional!), this is gonna be sloooooow
transitionM <- function(t,phone){
return(exp(lambda+ t(t(nu)) %*% listCandidateWards[[phone]][t,] ))
}
# Functions to extract MLE estimators of parameters for each duplet, given membership probabilities
getEstimators <- function(k,j){
memberSum <- 0; memberObsSum <- 0; memberObsSignal <- 0; memberObsDev <- 0
for (phoneDummy in 1:length(listObservedHotSpots)){
idx <- which(listObservedHotSpots[[phoneDummy]][,j] == 1)
memberSum <- memberSum + sum(wardP[[phoneDummy]][,k])
memberObsSum <- memberObsSum + sum(wardP[[phoneDummy]][idx,k])
memberObsSignal <- memberObsSignal + sum(wardP[[phoneDummy]][idx,k]*listObservedSignals[[phoneDummy]][idx,j])
}
obsProb <- memberObsSum / memberSum
if (memberObsSum==0) {mean <- mu[k,j]} else {mean <- memberObsSignal / memberObsSum}
for (phoneDummy in 1:length(listObservedHotSpots)){
idx <- which((listObservedHotSpots[[phoneDummy]][,j] == 1))
memberObsDev <- memberObsDev + sum(wardP[[phoneDummy]][idx,k]*(listObservedSignals[[phoneDummy]][idx,j]-mean)^2)
}
if (memberObsSum==0) {stDev <- sigma[k,j]} else {stDev <- sqrt( memberObsDev / memberObsSum )}
return(c(obsProb,mean,stDev))
}
wardEstimators <- function(k){
return(t(sapply(1:ncol(p), function(x) getEstimators(k,x))))
}
# Function to extract MLE estimator of weights in transition model!
scoreLambdasInner <- function(lambdasK,nuK,k,phone,t){
lambdasK[k] <- 0 # Always... thats the pivot in multinomial logit!
eprops <- exp(lambdasK+nuK*listCandidateWards[[phone]][t,])
return(sum(wardsP[[phone]][[t-1]][k,] * log( eprops/sum(eprops))))
}
sumTime <- function(lambdasK,nuK,k,phone){
# Here is when we ignore those entries where the phone was not active!
return(sum( sapply( which(listTimeAndPhones[[phone]][,4]=="yes")[-1], function(x) scoreLambdasInner(lambdasK,nuK,k,phone,x) ) ))
}
sumPhone <- function(lambdasK,nuK,k){
return(sum( parSapply(c1, 1:length(listTimeAndPhones), function(x) sumTime(lambdasK,nuK,k,x) ) ))
}
optimLambdasNuK <- function(x,k) {
lambdasK <- x[1:nrow(p)]
nuK<-x[nrow(p)+1]
return(-sumPhone(lambdasK,nuK,k)) #Negative since optim minimizes!
}
# Function to compute log-likelihood proportional bit (to assess whether convergence was reached)
sumJ <- function(phone,t,w){
iepe <- rep(0,ncol(p))
idx <- as.logical(listObservedHotSpots[[phone]][t,])
iepe[!idx] <- (1-p[w,!idx])
iepe[idx] <- (p[w,idx] * dnorm( (as.numeric(listObservedSignals[[phone]][t,idx]) - mu[w,idx]) / sigma[w,idx] ) / sigma[w,idx])
iepe <- wardP[[phone]][t,w] * sum( pmax(-100,log(iepe)) ) # We need to bound it... to be able to do parameter roundings later!
return( iepe )
}
sumW <- function(phone,t){
iep <- sapply(1:nrow(p), function(x) sumJ(phone,t,x))
return(sum(iep))
}
sumT <- function(phone){
iep <- sapply(1:nrow(wardP[[phone]]), function(x) sumW(phone,x))
return(sum(iep))
}
# Full pseudo log-likelihood accounting for membership probabilities!
logLik <- function(){
iep <- parSapply(c1,1:length(wardP), sumT)
ueee <- 0
for (i in 1:nrow(p)) ueee <- ueee + sumPhone(lambda[i,],nu[i],i)
return(sum(iep)+ueee)
}
#****************************************************
# EXPECTATION MAXIMIZATION FORWARD/BACKWARD PROCEDURE
#****************************************************
library(snow); library(parallel)
c1 <- makeCluster(7,type="SOCK") #This machine has got 8 cores, check parallel.detectCores()
# We declare the alpha and beta lists
alpha <- vector(mode="list",length=8) # Keep things just up to proportionality on w
beta <- vector(mode="list",length=8) # Keep things just up to proportionality on w
for (phone in 1:8) alpha[[phone]] <- matrix(0,nrow(listCandidateWards[[phone]]),ncol(wardP[[1]]))
for (phone in 1:8) beta[[phone]] <- matrix(0,nrow(listCandidateWards[[phone]]),ncol(wardP[[1]]))
# We define functions for the forward/backward passes; so that we can easily paralellize
forwardPass <- function(phone){
alpha[[phone]][1,11] <- 1 # This is because in first entry it must be in Coord Room
logVectorActPhone <- listTimeAndPhones[[phone]][,4]=="yes"
for (t in 2:nrow(listCandidateWards[[phone]])){
if (!logVectorActPhone[t]){
alpha[[phone]][t,11] <- 1 # Recall that if we know its in coord room we need to account for it!
# Probability of observation being made from anywhere else than coord room is 0!
} else {
alpha[[phone]][t,] <- bVector(phone,t) * alpha[[phone]][t-1,] %*% transitionM(t,phone)
alpha[[phone]][t,] <- alpha[[phone]][t,] / sum(alpha[[phone]][t,])
}
}
return(alpha[[phone]])
}
backwardPass <- function(phone){
beta[[phone]][nrow(beta[[phone]]),] <- 1/nrow(p) # We just keep info up to proportionality on ward likelihoods
logVectorActPhone <- listTimeAndPhones[[phone]][,4]=="yes"
for (t in seq(nrow(beta[[phone]])-1,1,-1) ){
if (!logVectorActPhone[t+1]){
beta[[phone]][t,] <- transitionM(t+1,1)[,11]  # If at next time we know it must be in coord room, then this is proportional to transitions
# to that cluster
beta[[phone]][t,] <- beta[[phone]][t,] / sum(beta[[phone]][t,])
} else {
beta[[phone]][t,] <- transitionM(t+1,phone) %*% (bVector(phone,t+1) * beta[[phone]][t+1,])
beta[[phone]][t,] <- beta[[phone]][t,] / sum(beta[[phone]][t,])
}
}
return(beta[[phone]])
}
# We also define a function for the computations of dual memberships, to also be able to parallelize
dualMemberships <- function(phone){
logVectorActPhone <- listTimeAndPhones[[phone]][,4]=="yes"
for(t in 2:length(wardsP[[phone]])){
if (!logVectorActPhone[t-1] && !logVectorActPhone[t]){
wardsP[[phone]][[t-1]][,] <- 0
wardsP[[phone]][[t-1]][11,11] <- 1
} else if (logVectorActPhone[t-1] && !logVectorActPhone[t]){
wardsP[[phone]][[t-1]][,] <- 0
wardsP[[phone]][[t-1]][,11] <- alpha[[phone]][t-1,] * transitionM(t,phone)[,11]
wardsP[[phone]][[t-1]] <- wardsP[[phone]][[t-1]] / sum(wardsP[[phone]][[t-1]]) # Can do after
#In this case it can only go to coord room straight in next transition!
} else {
wardsP[[phone]][[t-1]] <- t(t(alpha[[phone]][t-1,])) %*% (beta[[phone]][t,] * bVector(phone,t))
wardsP[[phone]][[t-1]] <- wardsP[[phone]][[t-1]] * transitionM(t,phone) # Can do after
wardsP[[phone]][[t-1]] <- wardsP[[phone]][[t-1]] / sum(wardsP[[phone]][[t-1]]) # Can do after
}
}
return(wardsP[[phone]])
}
#****************
# FIRST ITERATION
#****************
# Export info to Cluster
clusterExport(c1,list("wardP","sumW","sumT","sumJ","sumTime","sumPhone","p","listObservedHotSpots","listObservedSignals","listCandidateWards",
"listTimeAndPhones","nu","wardsP","alpha","beta","forwardPass","dualMemberships",
"mu","sigma","lambda","b","bVector","dummy","backwardPass","transitionM"))
# Read off all the relevant files we have so far
load("listObservedSignals.Rdata")
load("listObservedHotSpots.Rdata")
load("listCandidateWards.Rdata")
load("listTimeAndPhones.Rdata")
# Do not know why I had the idea to try with an "other" ward... with such small data set ignore it right away!
for (i in 1:length(listCandidateWards)) listCandidateWards[[i]] <- listCandidateWards[[i]][,-10]
library(RMySQL)
myDB <- dbConnect(MySQL(), user="root",
password="Anz5Ur8TUPVuh",
dbname="wayward",
host="localhost")
dbListTables(myDB)
hanData <- ( fetch( dbSendQuery(myDB, "select * from han") , n=-1) ) # Data from the task info
drShiftTimes <- ( fetch( dbSendQuery(myDB, "select * from drshift") , n=-1) ) # Relates phones at use with each doctor/shift
shifts <- read.csv("shiftsTimmings.csv",header=T)    # Jesse's is wrong for some reason
dbDisconnect(myDB); rm(myDB)
load("outputFiles/obsProbs.Rdata")
load("outputFiles/obsMeans.Rdata")
load("outputFiles/obsSDs.Rdata")
load("outputFiles/probabilityWards.Rdata")
load("outputFiles/lambdas.Rdata")
load("outputFiles/nus.Rdata")
##################
# ANALYSE STUFF! #
##################
# We begin with transition matrix under the influence of no tasks at all!
library(lattice)
require(gridExtra)
A <- exp(lambda+ t(t(nu)) %*% rep(0,9) )
for (i in 1:9) A[i,] <- A[i,]/sum(A[i,])
plot1 <- levelplot(t(A),column.values = seq(9,1,-1),cuts=15,colorkey=list(height=.5, space="right", at=seq(0, 1, 1/15), cuts=15),
main="Transition Matrix 1", xlab="", ylab="",col.regions = gray(seq(15,0,-1)/15),
scales=list(y=list(at=seq(9,1,-1), labels=colnames(listCandidateWards[[1]]), cex=1),
x=list(at=1:9, labels=colnames(listCandidateWards[[1]]),rot=90,cex=1 )) )
B<-A; diag(B)<-0; for(i in 1:7){B[i,]<-B[i,]/sum(B[i,])}
plot2 <- levelplot(t(B),column.values = seq(9,1,-1),cuts=15,colorkey=list(height=.5, space="right", at=seq(0, 1, 1/15), cuts=15),
main="Transition Matrix 2", xlab="", ylab="",col.regions = gray(seq(15,0,-1)/15),
scales=list(y=list(at=seq(9,1,-1), labels=colnames(listCandidateWards[[1]]), cex=1),
x=list(at=1:9, labels=colnames(listCandidateWards[[1]]),rot=90,cex=1 )) )
grid.arrange(plot1,plot2,ncol=2)
sort(table(hanData$ward))
setwd("D:/Iker/Wifi positioning/Dynamic Bayesian Network SupCl ExpTrans New")
# Read off all the relevant files we have so far
load("listObservedSignals.Rdata")
load("listObservedHotSpots.Rdata")
load("listCandidateWards.Rdata")
load("listTimeAndPhones.Rdata")
# Do not know why I had the idea to try with an "other" ward... with such small data set ignore it right away!
for (i in 1:length(listCandidateWards)) listCandidateWards[[i]] <- listCandidateWards[[i]][,-10]
library(RMySQL)
myDB <- dbConnect(MySQL(), user="root",
password="Anz5Ur8TUPVuh",
dbname="wayward",
host="localhost")
dbListTables(myDB)
hanData <- ( fetch( dbSendQuery(myDB, "select * from han") , n=-1) ) # Data from the task info
drShiftTimes <- ( fetch( dbSendQuery(myDB, "select * from drshift") , n=-1) ) # Relates phones at use with each doctor/shift
shifts <- read.csv("shiftsTimmings.csv",header=T)    # Jesse's is wrong for some reason
dbDisconnect(myDB); rm(myDB)
load("outputFiles/obsProbs.Rdata")
load("outputFiles/obsMeans.Rdata")
load("outputFiles/obsSDs.Rdata")
load("outputFiles/probabilityWards.Rdata")
load("outputFiles/lambdas.Rdata")
load("outputFiles/nus.Rdata")
##################
# ANALYSE STUFF! #
##################
# We begin with transition matrix under the influence of no tasks at all!
library(lattice)
require(gridExtra)
A <- exp(lambda+ t(t(nu)) %*% rep(0,9) )
for (i in 1:9) A[i,] <- A[i,]/sum(A[i,])
plot1 <- levelplot(t(A),column.values = seq(9,1,-1),cuts=15,colorkey=list(height=.5, space="right", at=seq(0, 1, 1/15), cuts=15),
main="Transition Matrix 1", xlab="", ylab="",col.regions = gray(seq(15,0,-1)/15),
scales=list(y=list(at=seq(9,1,-1), labels=colnames(listCandidateWards[[1]]), cex=1),
x=list(at=1:9, labels=colnames(listCandidateWards[[1]]),rot=90,cex=1 )) )
B<-A; diag(B)<-0; for(i in 1:7){B[i,]<-B[i,]/sum(B[i,])}
plot2 <- levelplot(t(B),column.values = seq(9,1,-1),cuts=15,colorkey=list(height=.5, space="right", at=seq(0, 1, 1/15), cuts=15),
main="Transition Matrix 2", xlab="", ylab="",col.regions = gray(seq(15,0,-1)/15),
scales=list(y=list(at=seq(9,1,-1), labels=colnames(listCandidateWards[[1]]), cex=1),
x=list(at=1:9, labels=colnames(listCandidateWards[[1]]),rot=90,cex=1 )) )
grid.arrange(plot1,plot2,ncol=2)
sort(table(hanData$ward))
# Overview of signal reception probability of HS from major areas (Also use wards in other data set!)
mainWardsNames <- c("NorthWest", "Central", "SouthWest", "NurseCoord")
idx <- sapply(mainWardsNames, function(x) which(colnames(listCandidateWards[[1]])==x))
par(mfrow = c(2,2),
oma = c(1,0,0,0) + 0.1, # oma will push graphs to make space for title
mar = c(1,1,1,-1) + 2)
for (i in idx) {
plot(1:ncol(p),as.numeric(p[i,]),type="h",xlim=c(1,ncol(p)),ylim=c(0,1),
main=c("North",colnames(listCandidateWards[[1]])[2:9])[i],bty="n",xaxt="n",xlab=" ",ylab=" ",col=gray.colors(1,0.2))
axis(1, at=seq(0,ncol(p),15),labels=as.character(seq(0,ncol(p),15)),
col.axis="black", las=1, cex.axis=1, tck=-.05)
}
rm(mainWardsNames,idx,i)
# Overview of received signals from major HS for South
idx <-which(colnames(listCandidateWards[[1]])=="South"); colnames(listCandidateWards[[1]])[idx]
HSidx <- order(p[idx,],decreasing = T)[1:4]
signals <- c()
for(iepe in 1:8){
idx2 <- which(wardP[[iepe]][,idx]>0.95)
if(length(idx2)>0) signals <- rbind(signals,listObservedSignals[[iepe]][idx2,HSidx])
}
par(mfrow = c(2,2),
oma = c(1,0,0,0) + 0.1, # oma will push graphs to make space for title
mar = c(1,1,1,-1) + 2)
for(i in 1:4){
dummy<-density(signals[!is.na(signals[,i]),i],adjust=2)
dummy$y <- dummy$y * p[idx,HSidx[i]]
plot(dummy,xlim=c(-100,-30),ylim=c(0,0.06),main=paste("AP:",colnames(listObservedSignals[[iepe]])[HSidx[i]]),
lwd=1.5,bty="n",xlab=" ",ylab=" ");
lines(seq(-120,0,0.01),
p[idx,HSidx[i]]*dnorm(seq(-120,0,0.01),mu[idx,HSidx[i]],sigma[idx,HSidx[i]]),
col="red",lty=2,lwd=1.5)
}
rm(dummy, HSidx, i, idx, idx2)
setwd("D:/Iker/Wifi positioning/Dynamic Bayesian Network ExpTrans SimData")
# Read off all the relevant files we have so far
load("candidateTables.Rdata"); load("observedAP.Rdata"); load("observedRS.Rdata")
load("outputFiles/obsProbs.Rdata")
load("outputFiles/obsMeans.Rdata")
load("outputFiles/obsSDs.Rdata")
load("outputFiles/probabilityTables.Rdata")
load("outputFiles/lambdas.Rdata")
load("outputFiles/nus.Rdata")
################
# Recreate Map #
################
library(raster)
# We begin creating an open space environment... with tables, 30x40 meters
red <- matrix(1,120,160); green<- red; blue<-red #Walkable space or wall? binary
#Walls
red[c(1,120),]<-0; red[,c(1,160)]<-0; red[96:100,1]<-1; green <-red; blue <-red
# Add activity tables in brown (2x3 meter ones)
r <- 0.6; g <- 0.5; b <- 0.45
red[4:11,146:157] <- r;  red[110:117,146:157] <- r; red[4:11,4:15] <- r; red[110:117,4:15] <- r;
red[c(43:48),c(95:102)] <- r; red[c(43:50),c(103:108)] <- r; #10 and 15 meters off centre
red[c(70:77),c(52:57)] <- r; red[c(72:77),c(58:65)] <- r;
green[4:11,146:157] <- g;  green[110:117,146:157] <- g; green[4:11,4:15] <- g; green[110:117,4:15] <- g;
green[c(43:48),c(95:102)] <- g; green[c(43:50),c(103:108)] <- g; #10 and 15 meters off centre
green[c(70:77),c(52:57)] <- g; green[c(72:77),c(58:65)] <- g;
blue[4:11,146:157] <- b;  blue[110:117,146:157] <- b; blue[4:11,4:15] <- b; blue[110:117,4:15] <- b;
blue[c(43:48),c(95:102)] <- b; blue[c(43:50),c(103:108)] <- b; #10 and 15 meters off centre
blue[c(70:77),c(52:57)] <- b; blue[c(72:77),c(58:65)] <- b;
#Create a map
layout <- rgb(red[,seq(160,1,-1)],green[,seq(160,1,-1)],blue[,seq(160,1,-1)]) #red matrix, green matrix, blue matrix
dim(layout) <- dim(red); layout <- as.raster((t(layout)))
#Plot it
par(mfrow = c(1,2),
oma = c(0,0,4,0) + 0.1, # oma will push graphs to make space for title
mar = c(2,0,0,0) + 2)
plot(layout,interpolate=F,ylim=c(0,160), xlim=c(0,120))
points(c(95,101),c(0,0),pch=15,cex=0.5)
# We place the access points...
points(c(1,55,119),c(100,159,40),pch=19,col="red",cex=1.2)
# Name locations... numerically to put transitions on a list
text(c(7.5,113.5,7.5,113.5,45.5,74.5),c(151.5,151.5,9.5,9.5,102,58),labels=c("1","2","3","4","5","6"),font=2,cex=0.85)
# EXAMPLE OF TASK DATA
plot(c(3,12),c(1,1),type="l",xlim=c(0,30),ylim=c(0.5,10),xlab="",ylab=" ",yaxt="n",bty="n",lty=1,lwd=3,col=1); lines(c(3,3),c(1,9),lty=3); points(c(3,12),c(1,1),pch=19)
lines(c(5,18),c(2,2),type="l",xlim=c(0,30),lty=1,lwd=3,col=1); lines(c(5,5),c(2,9),lty=3);points(c(5,18),c(2,2),pch=19)
lines(c(8,19),c(3,3),type="l",xlim=c(0,30),lty=1,lwd=3,col=1);lines(c(8,8),c(3,9),lty=3);points(c(8,19),c(3,3),pch=19)
lines(c(14,20),c(4,4),type="l",xlim=c(0,30),lty=1,lwd=3,col=1);lines(c(14,14),c(4,9),lty=3);points(c(14,20),c(4,4),pch=19)
lines(c(22,26),c(5,5),type="l",xlim=c(0,30),lty=1,lwd=3,col=1);lines(c(22,22),c(5,9),lty=3);points(c(22,26),c(5,5),pch=19)
lines(c(24,27),c(6,6),type="l",xlim=c(0,30),lty=1,lwd=3,col=1);lines(c(24,24),c(6,9),lty=3);points(c(24,27),c(6,6),pch=19)
text(c(3,5,8,14,22,24),rep(9.5,6),labels=c("1","3","1","4","6","3"),font=1); text(14,10.2,"Table"); text(28,0.4,"Time")
mtext("Location Map and Activity Data", outer = TRUE, cex = 1.5)
# Now we need four matrices each defining the probability for every cluster at each pixel
b <- function(w,scans){
dummy<- rep(0,3)
observedAP<-as.numeric(scans>-91)
idx <- as.logical(observedAP)
if( sum(idx)==0 ) return(prod(1 - p[w,]))
dummy[!idx] <- (1 - p[w,!idx])
dummy[idx] <- p[w,idx] * dnorm( (as.numeric(scans[idx]) - mu[w,idx]) / sigma[w,idx] ) / sigma[w,idx]
return(prod(dummy))
}
bVector <- function(scans){
probs <- sapply(1:nrow(p), function(x) b(x,scans))
return(probs/sum(probs))
}
#Build list of matrices
probsTable <- vector("list",6)
for (i in 1:6) probsTable[[i]]<-matrix(1,120,160)
for (i in 1:120){
for (j in 1:160){
signals<- c(sqrt(sum(((c(55,160)-c(i,j))/4)^2)),sqrt(sum(((c(1,100)-c(i,j))/4)^2)),sqrt(sum(((c(120,40)-c(i,j))/4)^2)))
signals<- -30-16*log(1+signals)
probs <- bVector(signals)
for (k in 1:6) probsTable[[k]][i,j] <- probs[k]
}
}
#Assign one color to each... and begin the plot again
reds<-c(69,0,131,153,205,205)/255; greens<-c(139,139,139,50,149,51)/255; blues<-c(0,139,139,204,12,51)/255
# We begin creating an open space environment... with tables, 30x40 meters
red <- matrix(1,120,160); green<- red; blue<-red #Walkable space or wall? binary
# Colors reflecting probabilities
for (i in 1:120){
for (j in 1:160){
#ue<-rep(0,6)
#ue[which.max(sapply(1:6,function(x) probsTable[[x]][i,j]))]<-1
ue<-sapply(1:6,function(x) probsTable[[x]][i,j])
red[i,j] <- sum(reds * ue)
green[i,j] <- sum(greens * ue)
blue[i,j] <- sum(blues * ue)
}
}
#Walls
red[c(1,120),]<-0; red[,c(1,160)]<-0; red[96:100,1]<-1;
green[c(1,120),]<-0; green[,c(1,160)]<-0; green[96:100,1]<-1;
blue[c(1,120),]<-0; blue[,c(1,160)]<-0; blue[96:100,1]<-1;
# Add activity tables in brown (2x3 meter ones)
r <- 0.6; g <- 0.5; b <- 0.45
red[4:11,146:157] <- r;  red[110:117,146:157] <- r; red[4:11,4:15] <- r; red[110:117,4:15] <- r;
red[c(43:48),c(95:102)] <- r; red[c(43:50),c(103:108)] <- r; #10 and 15 meters off centre
red[c(70:77),c(52:57)] <- r; red[c(72:77),c(58:65)] <- r;
green[4:11,146:157] <- g;  green[110:117,146:157] <- g; green[4:11,4:15] <- g; green[110:117,4:15] <- g;
green[c(43:48),c(95:102)] <- g; green[c(43:50),c(103:108)] <- g; #10 and 15 meters off centre
green[c(70:77),c(52:57)] <- g; green[c(72:77),c(58:65)] <- g;
blue[4:11,146:157] <- b;  blue[110:117,146:157] <- b; blue[4:11,4:15] <- b; blue[110:117,4:15] <- b;
blue[c(43:48),c(95:102)] <- b; blue[c(43:50),c(103:108)] <- b; #10 and 15 meters off centre
blue[c(70:77),c(52:57)] <- b; blue[c(72:77),c(58:65)] <- b;
#Grey all out
red <- red*0.8 + c(131,139,139)/255*0.2; green <- green*0.8 + c(131,139,139)/255*0.2; blue <- blue*0.8 + c(131,139,139)/255*0.2;
#Create a map
layout <- rgb(red[,seq(160,1,-1)],green[,seq(160,1,-1)],blue[,seq(160,1,-1)]) #red matrix, green matrix, blue matrix
dim(layout) <- dim(red);
#image(matrix(1:19200,ncol=160,nrow=120),col=layout,xaxt="n",yaxt="n")
layout <- as.raster((t(layout)))
#Plot it
par(mfrow = c(1,1),
oma = c(0,0,0,0) + 0.1, # oma will push graphs to make space for title
mar = c(2,2,0,0) + 2)
plot(layout,interpolate=F,ylim=c(0,160), xlim=c(0,120))
points(c(95,101),c(0,0),pch=15,cex=0.5)
# We place the access points...
points(c(1,55,119),c(100,159,40),pch=19,col="red",cex=1.2)
# Name locations... numerically to put transitions on a list
text(c(7.5,113.5,7.5,113.5,45.5,74.5),c(151.5,151.5,9.5,9.5,102,58),labels=c("1","2","3","4","5","6"),font=2,cex=0.85)
# draw an axis on the left
axis(2, at=seq(0,160,40),labels=seq(0,40,10), las=2,tck=-.01,cex.axis=0.7)
# draw an axis on the right, with smaller text and ticks
axis(1, at=seq(0,120,40),labels=seq(0,30,10), las=1, tck=-.01, pos = c(-7,0),cex.axis=0.7)
# Add coordinates
for(i in 1:39){
lines(c(1,119),c(i*4,i*4),lty=3,lwd=0.2,col=gray.colors(1,0.4))
}
for(i in 1:29){
lines(c(i*4,i*4),c(1,159),lty=3,lwd=0.2,col=gray.colors(1,0.4))
}
library(lattice)
require(gridExtra)
A <- exp(lambda+ t(t(nu)) %*% rep(0,6) )
for (i in 1:6) A[i,] <- A[i,]/sum(A[i,])
plot1 <- levelplot(t(A),column.values = seq(6,1,-1),cuts=15,colorkey=list(height=.5, space="right", at=seq(0, 1, 1/15), cuts=15),
main="Transition Matrix 1", xlab="", ylab="",col.regions = gray(seq(15,0,-1)/15),
scales=list(y=list(at=seq(6,1,-1), labels=colnames(candidateTables), cex=1),
x=list(at=1:6, labels=colnames(candidateTables),rot=90,cex=1 )) )
B<-A; diag(B)<-0; for(i in 1:6){B[i,]<-B[i,]/sum(B[i,])}
plot2 <- levelplot(t(B),column.values = seq(6,1,-1),cuts=15,colorkey=list(height=.5, space="right", at=seq(0, 1, 1/15), cuts=15),
main="Transition Matrix", xlab="", ylab="",col.regions = gray(seq(15,0,-1)/15),
scales=list(y=list(at=seq(6,1,-1), labels=colnames(candidateTables), cex=1),
x=list(at=1:6, labels=colnames(candidateTables),rot=90,cex=1 )) )
grid.arrange(plot1,plot2,ncol=2) # Screw this matrix... people walk so quick and two scans could be anywhere!
# Overview of signal reception probability from tables
mainWardsNames <- as.character(seq(1:6))
idx <- sapply(mainWardsNames, function(x) which(colnames(candidateTables)==x))
par(mfrow=c(2,3))
for (i in idx) {plot(1:ncol(p),as.numeric(p[i,]),type="h",xlim=c(1,ncol(p)),ylim=c(0,1),
main=colnames(candidateTables)[i],xlab="AP Number",ylab="Probability")}
rm(mainWardsNames,idx,i)
# Overview of received signals from major HS for ward Southwell
idx <-which(colnames(candidateTables)==c("1"));
HSidx <- order(p[idx,],decreasing = T)[1:3]
signals <- c()
idx2 <- which(tableP[,idx]>0.00001)
if(length(idx2)>0) signals <- rbind(signals,observedRS[idx2,HSidx])
par(mfrow=c(1,3))
for(i in 1:3){
dummy<-density(signals[!is.na(signals[,i]),i],adjust=2)
dummy$y <- dummy$y * p[idx,HSidx[i]]
plot(dummy,xlim=c(-100,-30),ylim=c(0,0.2),main=colnames(observedRS)[HSidx[i]]);
lines(seq(-120,0,0.01),
p[idx,HSidx[i]]*dnorm(seq(-120,0,0.01),mu[idx,HSidx[i]],sigma[idx,HSidx[i]]),
col="red",lty=2)
}
rm(dummy, HSidx, i, idx, idx2)
# Now try and filter the position of the phone over a whole shift were it is being used
shifts <- rep(1:200,each=120) #100 hours of Scans 100*60*4
shift <- which(shifts==1)
candWards1 <- candidateTables[shift,]
probabilityWards1 <- tableP[shift,]
# We will NOT use a heatmap, it's awful
par(mar=c(5, 5, 4, 2) + 0.5, oma = c(0,0,0,0) + 0.1, mfrow=c(2,1) )
plot(c(1,nrow(candWards1)), c(20,20), type="l",col=gray(1),lwd=6,
xlim=c(1,nrow(candWards1)),ylim=c(0.8,ncol(candWards1)+0.2),yaxt="n",xaxt="n",xlab="Minutes",ylab="Location",bty="n",
main="Proportional Activity Plot")
axis(1, at=seq(0,120,20),labels=as.character(seq(0,30,5)),
col.axis="black", las=1, cex.axis=0.9, tck=-.01)
axis(2, at=1:ncol(candWards1),labels=colnames(candWards1),
col.axis="black", las=2, cex.axis=0.9, tck=-.01)
for(j in 1:ncol(candWards1)){
for(i in 1:(nrow(candWards1))){
points(c(i),c(j),col=gray(   1-(3^candWards1[i,j]/sum(3^candWards1[i,]))  ),pch=15,cex=1)
}
}
plot(c(1,nrow(candWards1)), c(20,20), type="l",col=gray(1),lwd=6,
xlim=c(1,nrow(candWards1)),ylim=c(0.8,ncol(candWards1)+0.2),yaxt="n",xaxt="n",xlab="Minutes",ylab="Location",bty="n",
main="Labelled Location")
axis(1, at=seq(0,120,20),labels=as.character(seq(0,30,5)),
col.axis="black", las=1, cex.axis=0.9, tck=-.01)
axis(2, at=1:ncol(candWards1),labels=colnames(candWards1),
col.axis="black", las=2, cex.axis=0.9, tck=-.01)
for(j in 1:ncol(candWards1)){
for(i in 1:(nrow(candWards1))){
points(c(i),c(j),col=gray(   1-probabilityWards1[i,j]*0.8  ),pch=15,cex=1)
}
}
par(mar=c(5, 5, 4, 2) + 0.5, oma = c(0,0,0,0) + 0.1, mfrow=c(1,2) )
plot(c(1,nrow(candWards1)), c(20,20), type="l",col=gray(1),lwd=6,
xlim=c(1,nrow(candWards1)),ylim=c(0.8,ncol(candWards1)+0.2),yaxt="n",xaxt="n",xlab="Minutes",ylab="Location",bty="n",
main="Proportional Activity Plot")
axis(1, at=seq(0,120,20),labels=as.character(seq(0,30,5)),
col.axis="black", las=1, cex.axis=0.9, tck=-.01)
axis(2, at=1:ncol(candWards1),labels=colnames(candWards1),
col.axis="black", las=2, cex.axis=0.9, tck=-.01)
for(j in 1:ncol(candWards1)){
for(i in 1:(nrow(candWards1))){
points(c(i),c(j),col=gray(   1-(3^candWards1[i,j]/sum(3^candWards1[i,]))  ),pch=15,cex=1)
}
}
plot(c(1,nrow(candWards1)), c(20,20), type="l",col=gray(1),lwd=6,
xlim=c(1,nrow(candWards1)),ylim=c(0.8,ncol(candWards1)+0.2),yaxt="n",xaxt="n",xlab="Minutes",ylab="Location",bty="n",
main="Labelled Location")
axis(1, at=seq(0,120,20),labels=as.character(seq(0,30,5)),
col.axis="black", las=1, cex.axis=0.9, tck=-.01)
axis(2, at=1:ncol(candWards1),labels=colnames(candWards1),
col.axis="black", las=2, cex.axis=0.9, tck=-.01)
for(j in 1:ncol(candWards1)){
for(i in 1:(nrow(candWards1))){
points(c(i),c(j),col=gray(   1-probabilityWards1[i,j]*0.8  ),pch=15,cex=1)
}
}
